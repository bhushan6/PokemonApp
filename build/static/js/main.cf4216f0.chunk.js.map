{"version":3,"sources":["component/ProgressBar.js","component/Card.js","component/Header.js","component/CardSkeleton.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","statName","width","className","style","Card","imgUrl","name","rank","stats","pokeType","bgColor","normal","grass","fire","water","fighting","flying","poison","ground","rock","bug","ghost","electric","psychic","ice","dragon","dark","steel","fairy","color","Object","keys","includes","onClick","backgroundColor","src","alt","map","item","key","id","base_stat","stat","Header","CardSkeleton","pokemon","inLim","inOff","App","useState","data","setData","lim","setOff","loading","setLoading","useEffect","getData","limit","off","a","fetch","resp","json","poke","results","index","length","element","url","respSingle","singlePoke","push","window","addEventListener","fn","wait","time","Date","now","throttle","scrolling","innerHeight","scrollY","scrollable","document","body","offsetHeight","sprites","other","front_default","types","type","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf4216f0.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./ProgressBar.css\"\r\n\r\nfunction ProgressBar({statName, width}) {\r\n    return (\r\n        <div className=\"bar\">\r\n            <p className=\"bar-name\">{statName}</p>\r\n            <div className=\"bar-wrap\">\r\n                <div className=\"points\" style={{width :`${width*100/150}%`}}>\r\n                    \r\n                </div>\r\n            </div>\r\n    <span >{width}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar\r\n","import React from 'react'\r\nimport './Card.css'\r\nimport ProgressBar from './ProgressBar'\r\n\r\n\r\nfunction Card({imgUrl, name, rank, stats, pokeType}) {\r\n\r\n    const bgColor = {\r\n        normal: \"#BDBDAF\",\r\n        grass : \"#7eb998\",\r\n        fire:\"#f09990\",\r\n        water: \"#8ab7e2\",\r\n        fighting: \"#cc8c7f\",\r\n        flying: \"#78A1FF\",\r\n        poison: \"#d183c8\",\r\n        ground: \" #f1db90\",\r\n        rock : \"#e4d699\",\r\n        bug: \"#d9e086\",\r\n        ghost: \"#9995e4\",\r\n        electric: \"#f1e48e\",\r\n        psychic: \"#e493bf\",\r\n        ice : \"#a2dee7\",\r\n        dragon: \"#9c8fe5\",\r\n        dark : \"#d8a992\",\r\n        steel: \"#a7a3d8\",\r\n        fairy: \"#ebacf0\"\r\n    }\r\n// let bg = \"\";\r\nlet color = \"#000\";\r\nconst keys = Object.keys(bgColor);\r\nif(keys.includes(pokeType)) {\r\n    color = bgColor[pokeType];\r\n}\r\n\r\nfunction clicked() {\r\n\r\n}\r\n\r\n\r\n    // console.log(bgColor.normal)\r\n\r\n    return (\r\n        <div className=\"card-container\" onClick={clicked}>\r\n            <div className=\"card\">\r\n                <div className=\"front-card\" style = {{backgroundColor : color}}>\r\n                    <div className=\"img-container\">\r\n                        <img src={imgUrl} alt=\"\"/>\r\n                    </div>\r\n                    <h3 className=\"rank\">#{rank}</h3>\r\n                    <h3 className=\"name\">{name}</h3>\r\n                    <h3 className=\"type\" >{pokeType}</h3>\r\n                </div>\r\n                <div className=\"back-card\">\r\n                    <div className=\"stats\">\r\n                        {stats.map(item => (\r\n                            <ProgressBar \r\n                            key = {item.id}\r\n                            width = {item.base_stat} \r\n                            statName= {item.stat.name}/>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport \"./Header.css\"\r\nimport {useState, useEffect} from \"react\"\r\n\r\nfunction Header() {\r\n    // const [expanded, setExpanded] = useState(false)\r\n    // const [byType, setByType] = useState(false);\r\n\r\n    // function searchByType() {\r\n    //     setByType(true);\r\n        \r\n    // }\r\n\r\n    // useEffect(() => {\r\n\r\n    //   searchByType()\r\n       \r\n    // }, [byType])\r\n\r\n    // function expand(){\r\n    //     setExpanded(!expanded)\r\n    // }\r\n\r\n    return (\r\n            <header>\r\n                {/* className={expanded? \"show\" : null} */}\r\n                {/* <div className=\"row-1\"> */}\r\n                    {/* <input type=\"text\" name=\"\" id=\"\" placeholder=\"Search Pokemon\"/> */}\r\n                    <img  src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/International_Pok%C3%A9mon_logo.svg/500px-International_Pok%C3%A9mon_logo.svg.png\" alt=\"\"/>\r\n                    {/* <h4 onClick={expand}>Sort By Types</h4> */}\r\n                {/* </div> */}\r\n                {/* <div className=\"types\">\r\n                    <h4 id=\"normal\" onClick ={searchByType}>Normal</h4>\r\n                    <h4 id=\"grass\">Grass</h4>\r\n                    <h4 id=\"fire\">Fire</h4>\r\n                    <h4 id=\"water\">Water</h4>\r\n                    <h4 id=\"fighting\">Fighting</h4>\r\n                    <h4 id=\"flying\">flying</h4>\r\n                    <h4 id=\"poison\">poison</h4>\r\n                    <h4 id=\"ground\">ground</h4>\r\n                    <h4 id=\"rock\">rock</h4>\r\n                    <h4 id=\"bug\">bug</h4>\r\n                    <h4 id=\"ghost\">ghost</h4>\r\n                    <h4 id=\"electric\">electric</h4>\r\n                    <h4 id=\"psychic\">psychic</h4>\r\n                    <h4 id=\"ice\">ice</h4>\r\n                    <h4 id=\"dragon\">dragon</h4>\r\n                    <h4 id=\"dark\">dark</h4>\r\n                    <h4 id=\"steel\">steel</h4>\r\n                    <h4 id=\"fairy\">fairy</h4>\r\n                </div> */}\r\n            </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport './CardSkeleton.css'\r\n\r\nfunction CardSkeleton() {\r\n    return (\r\n        <div className=\"card-skeleton\">\r\n            <div className=\"img-skeleton\"></div>\r\n            <div className=\"rank-skeleton\"></div>\r\n            <div className=\"name-skeleton\"></div>\r\n            <div className=\"type-skeleton\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardSkeleton\r\n","import React from 'react';\nimport {useState, useEffect} from 'react'\nimport './App.css';\nimport Card from './component/Card'\nimport Header from \"./component/Header\"\n// import loadingImg from './images/pokeball.png'\nimport CardSkeleton from './component/CardSkeleton'\n\nlet pokemon = [];\nlet inLim = 50;\nlet inOff = 0;\n\n\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [lim, setLim] = useState(inLim);\n  const [off, setOff] = useState(inOff);\n  const [loading, setLoading] = useState(true);\n  \n\n\n\n\nuseEffect(() => {\n\n  async function getData(limit, off) {\n    let resp = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=${off}`)\n    let data = await resp.json()\n    let poke = data.results\n    // console.log(poke)\n    for (let index = 0; index < poke.length; index++) {\n        const element = poke[index];\n        let respSingle = await fetch(element.url)\n        let singlePoke = await respSingle.json()\n        pokemon.push(singlePoke)\n    }\n    setData(pokemon)\n    setLoading(false)\n}\n\n\n\ngetData(inLim, inOff)\n\nwindow.addEventListener('scroll',throttle(callback, 1000) )\n\nfunction throttle(fn, wait) {\n  let time = Date.now();\n  return function() {\n    if ((time + wait - Date.now()) < 0) {\n      fn();\n      time = Date.now();\n    }\n  }\n}\n\nfunction callback() {\n\n  setLoading(true)\n  let scrolling = window.innerHeight + window.scrollY;\n  let scrollable = document.body.offsetHeight * 0.9;\n\n  if (scrolling >= scrollable){\n    load()\n  }\n}\n\nfunction load() {\n  if(inLim === 50 && inOff === 0){\n    inLim = 10;\n  inOff += 50\n  setOff(inOff)\n  getData(inLim, inOff)\n  } else{\n    inLim = 10;\n    inOff+=10\n    setOff(inOff)\n    getData(inLim, inOff)\n  }\n}\n    \n  }, [lim])\n\n  return (\n    <div>\n      <div className=\"container\" >\n         <Header/>\n         {data.map(item => (\n           <Card \n           name= {item.name} \n           imgUrl={item.sprites.other[\"official-artwork\"].front_default} \n           rank={item.id} \n           stats={item.stats} \n           pokeType={item.types[0].type.name}\n           />\n         ))}\n         \n      </div>\n         {loading? (<div className=\"loader\">\n           <CardSkeleton/>\n           <CardSkeleton/>\n           <CardSkeleton/>\n           <CardSkeleton/>\n           <CardSkeleton/>\n           <CardSkeleton/>\n           <CardSkeleton/>\n           <CardSkeleton/>\n         </div>) : null}\n    </div>\n  );\n\n \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}